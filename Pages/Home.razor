@page "/"
@using HexGridProject.HexGrid

<h3>Hex Grid Demo</h3>

<div id="hexGridContainer" style="position: relative; width: 800px; height: 600px; border: 1px solid #ccc;">
    @foreach (var hex in Hexes)
    {
        var (x, y) = HexMath.GetDoubledHexPosition(hex.Col, hex.Row, HexSize);

        <div style="position: absolute;
                    width: @HexWidth px;
                    height: @HexHeight px;
                    background-color: lightgray;
                    border: 1px solid black;
                    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
                    left: @(x)px;
                    top: @(y)px;">
            @if (hex.IsOccupied)
            {
                <div class="ship"></div>
            }
        </div>
    }
</div>

@code {
    const float HexSize = 30;  // Size of each hex (radius)
    const int HexWidth = 60;  // Approximate width for rendering
    const int HexHeight = 52; // Approximate height for rendering

    List<Hex> Hexes = new List<Hex>();

    protected override void OnInitialized()
    {
        Hexes.Clear();
        for (int row = 0; row < 5; row++) // 5 rows
        {
            for (int col = 0; col < 10; col += 2) // 10 columns, increment by 2 for doubled-column layout
            {
                Hexes.Add(new Hex(col, row, false));
            }
        }

        // Place a test ship
        if (Hexes.Count > 12)
        {
            Hexes[12].IsOccupied = true; // Ensure there are enough hexes to avoid out-of-range errors
        }
    }


}
